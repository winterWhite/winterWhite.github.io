[{"title":"Exploring ES2018 and ES2019 之 Asynchronous iteration","url":"/2018/08/09/Exploring-ES2018-and-ES2019-1/","content":"\n这是一个学习系列笔记，来源于学习《Exploring ES2018 and ES2019》，电子书地址：<http://exploringjs.com/es2018-es2019/toc.html>\n","tags":["ES2018"]},{"title":"Career-Learning","url":"/2018/08/09/Career-Learning/","content":"\n## Front End\n\n![FrontEnd Learning RoadMap](/imgs/frontend.png)\n\n\n## Back End\n\n![BackEnd_Learning_RoadMap](/imgs/backend.jpg)\n\n\n## Devops\n\n![Devops_Learning_RoadMap](/imgs/devops.png)\n\n\n## React Dev\n\n![React_Learning_RoadMap](/imgs/react.png)","tags":["Career"]},{"title":"构建系列-FIS 3","url":"/2018/08/09/Build-FIS-3/","content":"\nFIS 3是一个来自百度的优秀国产构建工具。   \n相比Grant、Gulp只提供了基本的功能的工具，FIS 3提供了一些常见的前端构建功能：\n\n- 读写文件：通过 fis.match 读文件，release 配置文件输出路径。\n- 资源定位：解析文件之间的依赖关系和文件位置。\n- 文件指纹：在通过 useHash 配置输出文件时为文件 URL加上 md5 戳，来优化浏览器的缓存。\n- 文件编译：通过 parser 配置文件解析器做文件转换，例如将 ES6 编译成 ES5。\n- 压缩资源：通过 optimizer 配置代码压缩方法。\n- 图片合并：通过 spriter 配置合并 CSS 里导入的图片到一个文件中，来减少 HTTP 请求数。","tags":["Build"]},{"title":"构建系列-Webpack","url":"/2018/08/09/Build-Webpack/","content":"\nWebpack 是一个打包模块化的JavaScript的工具，专注于构建模块化的项目。   \nWebpack 通过 loader 转换文件，通过Plugin 注入钩子，最后输出由多个模块组合成的文件。\n","tags":["Build"]},{"title":"构建系列-Gulp","url":"/2018/08/09/Build-Gulp/","content":"\nGulp 是一个基于流的自动化构建工具。除了可以管理任务和执行任务，还支持监听文件、读写文件。支持以下5个方法：\n\n- 通过 gulp.task 注册一个任务；\n- 通过 gulp.run 执行任务；\n- 通过 gulp.watch 监听文件变化；\n- 通过 gulp.src 读取文件；\n- 通过 gulp.dest 写完文件。","tags":["Build"]},{"title":"构建系列-What","url":"/2018/08/09/Build-What-to-do/","content":"\n前端工程化思想的技术落地，将源代码转换成可以执行的JavaScript、CSS、HTML 代码，具体包括：\n\n1. 代码转换：将 TypeScript 编译成JavaScript、将 SCSS 编译成 CSS等。\n2. 文件优化：压缩JavaScript、CSS、HTML 代码，压缩合并图片等。\n3. 代码分割：提取多个页面的公共代码，提取首屏不需要执行部分代码让其异步记在。\n4. 模块合并：在采用模块化的项目里会有很多个模块和文件，需要通过构建功能将模块分类合并成一个文件。\n5. 自动刷新：监听本地源代码变化，自动重新构建、刷新浏览器。\n6. 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。\n7. 自动发布：更新代码后，自动构建出线上发布代码并传输给发布系统。","tags":["Build"]},{"title":"CSS 7-1 Pattern","url":"/2018/08/09/Css-7-1-pattern/","content":"\n1. 7 different folders\n    1. base：typography rules, animations, utilities···\n    2. components：buttons, forms, swipers, popups···\n    3. layout：header, footer, navigation, section，grid···\n    4. pages：special style for page only\n    5. themes：different themes\n    6. abstracts：functions & helpers，variables and mixins\n    7. vendors：third part css，like bootstrap···\n2. 1 main.scss file to import all other files\n","tags":["CSS"]}]